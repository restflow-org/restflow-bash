imports:

- classpath:/org/restflow/bash/bashActor.yaml

components:

- id: Adder
  type: BashActor
  properties:
    step: |
      sum=$(($a+$b))
    inputs:
      a: 
        default: 0
      b: 
        default: 0
    outputs: 
      sum:
      
- id: ConstantSource
  type: BashActor
  properties:
    step: |
      output=$value
    inputs: 
      value:
    outputs: 
      value:

- id: IntegerConstantSource
  type: BashActor
  properties:
    step: |
      output=$value
    inputs: 
      value:
    outputs: 
      value:
    types:
      value: Integer
      output: Integer

- id: Counter
  type: BashActor
  properties:
    initialize:
      count=0
    step: |
      count=$(($count+1))
    inputs: 
      input:
    outputs:
      count:
    state:
      count:
      
- id: IntegerBandpassFilter
  type: BashActor
  properties:
    step: |
      if [ $input -ge $min -a $input -le $max ] ; then
        output=$input
      else
        disableOutput output
      fi
    inputs: 
      min:
      max:
      input:
    outputs: 
      output:

- id: IntegerSequenceGenerator
  type: BashActor
  properties:
    initialize: |
      nextValue=$initial
    step: |
      value=$nextValue
      nextValue=$(($nextValue+$step))
      if [ $value -gt $max ] ; then
        disableOutput value
      fi
    state:
      nextValue:
    inputs:
      initial:
        default: 1
      step:  
        default: 1
      max:  
        default: 1
    outputs:
      value:

- id: ListSource
  type: BashActor
  properties:
    step: |
      outputList=$inputList;
    inputs: 
      inputList:
        type: List<Number>
    outputs: 
      outputList:  

- id: IntegerStreamMergerNoDuplicates
  type: BashActor
  properties:
    initialize: |
      _last=0
      _first=true
      enableInput a
      enableInput b
    step: |
      if [ $a = null -a b = null ] ; then
        disableOutput c
      elif [ $a = null ] ; then
        c=$b
        enableInput b
      elif [ $b = null ] ;then
        c=$a
        enableInput a
      elif [ $a -lt $b ] ; then
        c=$a
        enableInput a
      elif [ $a -gt $b ] ; then
        c=$b
        enableInput b
      elif [ $a = $b ] ; then
        c=$a
        enableInput a
        enableInput b
      fi
      if [ $c != null ] ; then
        if [ $_first = true ] ; then
          _last=$c
          _first=false
        else
          if [ $c = $_last ] ; then
            disableOutput c
          else
            _last=$c
          fi
        fi
      fi
    inputs: 
      a:
        optional: true
        nullable: true
        defaultReadiness: false
      b:
        optional: true
        nullable: true
        defaultReadiness: false
    outputs: 
      c:
    state: 
      a:
      b:
      _last:
      _first:

- id: Multiplier
  type: BashActor
  properties:
    step: product=$(($a*$b))
    inputs: 
      a:
      b:
    outputs: 
      product:
 
- id: PrintStreamWriter
  type: BashActor
  properties:
    initialize: |
      buffer=""
    step: |
      buffer="${buffer}${message}END_OF_LINE"
      if [ $outputImmediately = true ] ; then
        echo ${message}
      fi
    dispose: |
      if [ $outputAtWrapup = true ] ; then
        if [ "$name" != null ] ; then
          echo -n '*** '
          echo -n $name
          echo ' ***'
        fi
        buffer=${buffer%END_OF_LINE}
        echo -e ${buffer//END_OF_LINE/'\n'}
      fi
    state:
      buffer:
    inputs:
      name:
      message:
      outputImmediately:  
        default: true
      outputAtWrapup: 
        default: false

- id: SingleUnitBuffer
  type: ConstantSource

- id: SingleUnitIntegerBuffer
  type: IntegerConstantSource

- id: StringConcatenator
  type: BashActor
  properties:
    step: |
      concatenatedString="${stringOne}${stringTwo}"
    inputs:
      stringOne:
      stringTwo:
    outputs: 
      concatenatedString: